<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eat.main.MainDAO">

	<!-- 코스 불러오기 몸통 -->
	<select id="course_list" resultType="com.eat.dto.CourseDTO">
		<!-- SELECT p.post_idx
		,p.user_id
		,p.subject
		,p.b_hit
		,p.reg_date
		,p.public
		,p.blind
		,p.tmp
		FROM post p
		ORDER
		BY ${param3}
		LIMIT #{param2} OFFSET #{param1} -->
		SELECT p.*,
         IFNULL(l.like_cnt, 0) AS like_cnt,
         IFNULL(s.star_avg, 0) AS star_avg
		  FROM post p
		  LEFT JOIN (
		    SELECT post_idx, COUNT(*) AS like_cnt
		    FROM liked
		    WHERE class = 'course'
		    GROUP BY post_idx
		  ) l ON p.post_idx = l.post_idx
		  LEFT JOIN (
		    SELECT post_idx, FLOOR(AVG(star)) AS star_avg
		    FROM star
		    GROUP BY post_idx
		  ) s ON p.post_idx = s.post_idx
		  ORDER BY
		    ${param3}
		  LIMIT #{param2} OFFSET #{param1}
	</select>
	
	<!-- 전체 페이지 수 -->
	<select id="totalCount" resultType="int">
		SELECT COUNT(*) FROM post
    		WHERE public = true
	</select>

	<!-- 코스 리스트 닉네임 -->
	<select id="course_list_nick" resultType="String">
		SELECT nickname FROM
		member WHERE user_id =#{param1}
	</select>

	<!-- 코스 리스트 댓글 수 -->
	<select id="course_list_cmt_cnt" resultType="int">
		SELECT
		IFNULL(COUNT(comment_idx), 0) AS comment_cnt
		FROM comment
		WHERE post_idx
		= #{param1}
	</select>

	<!-- 코스 리스트 좋아요 수 -->
	<select id="course_list_like_cnt" resultType="int">
		SELECT
		IFNULL(COUNT(post_idx), 0) AS like_cnt
		FROM liked
		WHERE post_idx =
		#{param1} AND class = 'course'
	</select>

	<!-- 코스 리스트 별점 평균 -->
	<select id="course_list_star_avg" resultType="int">
		SELECT
		IFNULL(FLOOR(AVG(star)), 0) AS star_avg
		FROM star
		WHERE post_idx =
		#{param1}
	</select>

	<!-- 코스 리스트 일반 태그 -->
	<select id="course_list_tag" resultType="String">
		SELECT tag_name
		FROM tag
		WHERE tag_idx IN (SELECT idx FROM tag_course WHERE post_idx =
		#{param1}) AND class='course'
	</select>

	<!-- 코스 리스트 지역 태그 -->
	<select id="course_list_tag_area" resultType="String">
		SELECT tag_name
		FROM tag_area
		WHERE area_tag_idx in (SELECT idx FROM tag_course WHERE
		post_idx = #{param1} AND class='area_tag')
	</select>

	<!-- 코스 리스트 세부일정 idx -->
	<select id="detail" resultType="com.eat.dto.DetailRestaDTO">
		SELECT detail_idx
		FROM
		detail_restaurant
		WHERE post_idx = #{param1}
		ORDER BY detail_idx
	</select>

	<!-- 코스 리스트 이미지 불러오기 -->
	<select id="course_list_img" resultType="String">
		SELECT
		COALESCE(
		(
		SELECT
		p.new_filename
		FROM detail_restaurant dr
		JOIN restaurant r ON
		dr.resta_idx = r.resta_idx
		LEFT JOIN photo p ON r.img_idx = p.img_idx
		AND p.class = 'restaurant'
		WHERE dr.detail_idx = #{param1}
		ORDER BY
		dr.detail_idx, r.resta_idx
		LIMIT 1
		),
		'no_image.jpg'
		) AS new_filename
	</select>

	<!-- 페이지 -->
	<select id="pages" resultType="int">
		SELECT
		CEIL(COUNT(post_idx)/#{param1}) AS pages FROM post
	</select>

	<!-- 코스 상세보기 -->
	<!-- 코스 상세보기 조회수올리기 -->
	<update id="setB_hit">
		UPDATE post SET b_hit = b_hit+1 WHERE
		post_idx=#{post_idx}
	</update>

	<!-- 코스 상세 - 메인 -->
	<select id="getCourseDTO" resultType="com.eat.dto.CourseDTO">
		SELECT
		p.post_idx,
		p.user_id,
		m.nickname AS nickname,   <!-- member 테이블의 nickname -->
		p.subject,
		p.b_hit,
		p.reg_date,
		p.`public` AS isPublic,
		p.blind,
		p.tmp,
		p.post_cmt,

		

		<!-- 댓글 수를 계산해서 total_comment_count에 매핑 -->
		 IFNULL(
      (
        SELECT COUNT(*)
          FROM comment c
         WHERE c.post_idx = p.post_idx
      ), 0
    ) AS total_comment_count,

		<!-- 좋아요 수를 계산해서 total_like_count에 매핑 -->
		IFNULL(
      (
        SELECT COUNT(*)
          FROM liked l
         WHERE l.post_idx = p.post_idx
           AND l.`class` = 'course'
           AND l. liked = true
      ), 0
    ) AS total_like_count,

		<!-- 별점 평균을 계산해서 star_average에 매핑 -->
		 IFNULL(
      (
        SELECT ROUND(AVG(s.star), 1)
          FROM star s
         WHERE s.post_idx = p.post_idx
      ), 0
    ) AS star_average
	
	 FROM post p
  LEFT JOIN member m
    ON p.user_id = m.user_id
  WHERE p.post_idx = #{post_idx}
	
	</select>

	<!-- 코스 상세 - 타임라인 -->
	<select id="getTimelineDTO" resultType="com.eat.dto.TimelineDTO">
		SELECT * FROM timeline
		WHERE post_idx = #{post_idx}
	</select>

	<!-- 코스 상세 - 닉네임 -->
	<select id="getNickname" resultType="com.eat.dto.MemberDTO">
		SELECT nickname FROM member
		WHERE user_id = #{user_id}
	</select>

	<!-- 코스 상세 - 상세 일정 (식당) -->
	<select id="getDetailRestaList"
		resultType="com.eat.dto.DetailRestaDTO">
		SELECT * FROM detail_restaurant WHERE post_idx =
		#{post_idx} ORDER BY start
		ASC
	</select>

	<!-- 사진 가져오기 -->
	<select id="getRestaurantByIdx" parameterType="int"
		resultType="com.eat.dto.RestaurantDTO">
		SELECT
		resta_idx,
		img_idx,
		area_tag_idx,
		address,
		resta_name,
		url,
		lat,
		lng,
		resta_bio
		FROM restaurant
		WHERE resta_idx = #{resta_idx}
	</select>

	<resultMap id="PhotoResultMap" type="com.eat.dto.PhotoDTO">
		<id column="img_idx" property="img_idx" />
		<result column="`class`" property="photo_class" />
		<result column="new_filename" property="new_filename" />
	</resultMap>

	<select id="getPhotoByImgIdx" parameterType="int"
		resultMap="PhotoResultMap">
		SELECT
		img_idx,
		`class` AS photoClass,
		COALESCE(new_filename, 'no_image.jpg') AS new_filename
		FROM photo
		WHERE img_idx = #{imgIdx}
	</select>


	<!-- 코스 상세 - 상세 일정 (코멘트) -->
	<select id="getCmtDTOList" resultType="com.eat.dto.DetailCmtDTO">
		SELECT * FROM
		detail_comment WHERE post_idx = #{post_idx} ORDER BY start ASC
	</select>

	<!-- 코스 상세 - 태그 -->
	<select id="getCourseList" resultType="com.eat.dto.CourseTagDTO">
	SELECT 
	    tc.post_idx,
	    tc.idx,
	    tc.class AS isClass,
	    CASE 
	        WHEN tc.class = 'tag' THEN t.tag_name
	        WHEN tc.class = 'area_tag' THEN ta.tag_name
	        ELSE NULL
	    END AS tag_name
	FROM 
	    tag_course tc
	LEFT JOIN 
	    tag t ON tc.idx = t.tag_idx AND tc.class = 'tag'
	LEFT JOIN 
	    tag_area ta ON tc.idx = ta.area_tag_idx AND tc.class = 'area_tag'
	WHERE 
	    tc.post_idx = #{post_idx}
	</select>

	<!-- 코스 검색 --><!-- % : 0개 이상의 임의 문자 %abd% -> abc를 포함하는 모든 문자열 검색 가능 -->
	<select id="search_course" resultType="com.eat.dto.CourseDTO">
		SELECT p.post_idx,
		m.nickname AS nickname,
		p.user_id,
		p.subject,
		p.b_hit AS b_hit,
		p.reg_date,
		p.post_cmt,
		p.`public` AS isPublic,
		p.blind,
		p.tmp,

		-- 좋아요 수
		IFNULL((SELECT COUNT(*) FROM liked l WHERE l.post_idx = p.post_idx AND l.class =
		'course'), 0) AS total_like_count,
		-- 댓글 수
		IFNULL((SELECT COUNT(*) FROM comment c WHERE c.post_idx = p.post_idx), 0) AS
		total_comment_count,
		-- 별점 평균
		IFNULL((SELECT ROUND(AVG(s.star), 0) FROM star s WHERE s.post_idx = p.post_idx), 0)
		AS star_average

		FROM post p
		LEFT JOIN member m ON p.user_id = m.user_id

		<where>

			p.tmp = false

			<!-- 제목 또는 닉네임이 있을 경우 조건 추가 -->
			<if
				test="(subject != null and subject != '') or (nickname != null and nickname != '')">
				(
				<if test="subject != null and subject != ''">
					p.subject LIKE CONCAT('%', #{subject}, '%')
				</if>
				<if
					test="subject != null and subject != '' and nickname != null and nickname != ''">
					OR
				</if>
				<if test="nickname != null and nickname != ''">
					m.nickname LIKE CONCAT('%', #{nickname}, '%')
				</if>
				)
			</if>

			<!-- 태그 조건 -->
			<if test="tag != null and tag != ''">
				AND EXISTS (
				SELECT 1
				FROM tag_course tc
				LEFT JOIN tag t ON tc.idx = t.tag_idx AND tc.`class` = 'tag'
				LEFT JOIN tag_area ta ON tc.idx = ta.area_tag_idx AND tc.`class` =
				'area_tag'
				WHERE tc.post_idx = p.post_idx
				AND (
				t.tag_name LIKE CONCAT('%', #{tag}, '%')
				OR ta.tag_name LIKE CONCAT('%', #{tag}, '%')
				)
				)
			</if>

			<!-- 모든 검색 조건이 null일 경우: 결과 없음 -->
			<if
				test="(subject == null or subject == '') 
				and (nickname == null or nickname == '') 
				and (tag == null or tag == '')">
				AND 1 = 0
			</if>

		</where>
	</select>

	<!-- Photo 조회 -->
	<select id="getPhotosByPostIdx"
		resultType="com.eat.dto.PhotoDTO">
		SELECT
		p.img_idx,
		p.class AS photo_class,
		p.new_filename
		FROM detail_restaurant dr
		JOIN restaurant r ON dr.resta_idx = r.resta_idx
		JOIN photo p ON r.img_idx = p.img_idx
		WHERE dr.post_idx = #{post_idx}
	</select>

	<!-- 태그 검색 -->
	<select id="getTags" resultType="com.eat.dto.CourseTagDTO">
		SELECT idx, class AS isClass,
		post_idx FROM tag_course WHERE post_idx =
		#{post_idx}
	</select>

	<select id="searchTags" resultType="com.eat.tags.TagDTO">
		SELECT * FROM tag WHERE
		tag_idx = #{idx}
	</select>

	<select id="searchTagsArea" resultType="com.eat.tags.TagAreaDTO">
		SELECT * FROM tag_area
		WHERE area_tag_idx = #{idx}
	</select>

	<!-- 한 장짜리 썸네일 조회 -->
	<select id="courseListImg" resultType="String">
		SELECT COALESCE(
		(
		SELECT p.new_filename
		FROM detail_restaurant dr
		JOIN restaurant r ON dr.resta_idx = r.resta_idx
		JOIN photo p ON r.img_idx = p.img_idx
		AND p.class = 'restaurant'
		WHERE dr.post_idx = #{post_idx}
		ORDER BY dr.detail_idx, r.resta_idx
		LIMIT 1
		),
		'no_image.jpg'
		) AS thumbnail
	</select>

	<!-- 코스 전체 리스트 불러오기 (전체) -->
	<select id="course_list_all">
		SELECT * FROM post
	</select>

	<select id="fileInfo">
		SELECT new_filename
		FROM photo WHERE new_filename=#{param1}
	</select>

	<!-- 좋아요 -->
	<!-- 게시글 좋아요 -->
	<select id="checkPostLike" resultType="Boolean">
		SELECT liked FROM liked
		WHERE user_id = #{user_id}
		AND class = 'course'
		AND post_idx = #{post_idx}
	</select>

	<insert id="insertPostLike">
		INSERT INTO liked (user_id, class, post_idx, liked)
		VALUES (#{user_id}, 'course', #{post_idx}, #{liked})
	</insert>

	<update id="updatePostLike">
		UPDATE liked SET liked = #{liked}
		WHERE user_id = #{user_id} AND class = 'course' AND post_idx = #{post_idx}
	</update>

	<!-- 댓글 좋아요 -->
	<select id="checkCmtLike" resultType="Boolean">
		SELECT liked FROM liked
		WHERE user_id = #{user_id}
		AND class = 'comment'
		AND cmt_idx = #{cmt_idx}
	</select>

	<insert id="insertCmtLike">
		INSERT INTO liked (user_id, class, cmt_idx, liked, post_idx)
		VALUES (#{user_id}, 'comment', #{cmt_idx}, #{liked}, #{post_idx})
	</insert>

	<update id="updateCmtLike">
		UPDATE liked SET liked = #{liked}
		WHERE user_id = #{user_id} AND class = 'comment' AND cmt_idx = #{cmt_idx}
	</update>

	<!-- 좋아요 체크 -->
	<select id="likeCheck" resultType="Boolean">
		SELECT liked FROM liked
		WHERE user_id = #{user_id}
		AND class = 'course'
		AND post_idx = #{post_idx}
	</select>
	
	<!-- 좋아요 체크 댓글 -->
	<select id="likeCheckCmt" resultType="map">
	  SELECT cmt_idx, liked
	  FROM liked
	  WHERE user_id = #{user_id}
	    AND class = 'comment'
	    AND cmt_idx IN
	    <foreach item="idx" collection="list" open="(" separator="," close=")">
	      #{idx}
	    </foreach>
	</select>

	<!-- 별점 -->
	<insert id="star" parameterType="com.eat.dto.StarDTO">
		INSERT INTO star (user_id, post_idx, star)
		VALUES (#{user_id}, #{post_idx}, #{star})
		ON DUPLICATE KEY UPDATE
		star = #{star}
	</insert>


	<!-- filename return -->
	<select id="findFileName" resultType="string">
		SELECT new_filename FROM
		photo WHERE img_idx=#{param1}
	</select>
	
	<!-- 좋아요 높은 순서대로 코스 리스트 불러오기 (주간) -->
	<select id="weekly_best_list" resultType="map">
		 SELECT p.*, IFNULL(l.liked, 0) AS like_cnt
			FROM post p
			LEFT JOIN (
			    SELECT post_idx, SUM(liked) AS liked
			    FROM liked
			    GROUP BY post_idx
			) l ON p.post_idx = l.post_idx
			WHERE YEARWEEK(p.reg_date, 1) = YEARWEEK(CURDATE(), 1)
			ORDER BY l.liked DESC
			LIMIT 6
	</select>
	
	<!-- 좋아요 높은 순서대로 코스 리스트 불러오기 (월간) -->
	<select id="monthly_best_list" resultType="map">
		SELECT p.*, IFNULL(l.liked, 0) AS like_cnt
			FROM post p
			LEFT JOIN (
			    SELECT post_idx, SUM(liked) AS liked
			    FROM liked
			    GROUP BY post_idx
			) l ON p.post_idx = l.post_idx
			WHERE DATE_FORMAT(p.reg_date, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')
			ORDER BY l.liked DESC
			LIMIT 6
	</select>
	
	<!-- 코스 리스트 닉네임 (베스트 코스) -->
	<select id="best_course_list_nick" resultType="String">
		SELECT nickname FROM
		member WHERE user_id =#{param1}
	</select>

	<!-- 코스 리스트 댓글 수 (베스트 코스) -->
	<select id="best_course_list_cmt_cnt" resultType="int">
		SELECT
		IFNULL(COUNT(comment_idx), 0) AS comment_cnt
		FROM comment
		WHERE post_idx
		= #{param1}
	</select>

	<!-- 코스 리스트 좋아요 수 (베스트 코스) -->
	<select id="best_course_list_like_cnt" resultType="int">
		SELECT
		IFNULL(COUNT(post_idx), 0) AS like_cnt
		FROM liked
		WHERE post_idx =
		#{param1} AND class = 'course'
	</select>

	<!-- 코스 리스트 별점 평균 (베스트 코스) -->
	<select id="best_course_list_star_avg" resultType="int">
		SELECT
		IFNULL(FLOOR(AVG(star)), 0) AS star_avg
		FROM star
		WHERE post_idx =
		#{param1}
	</select>

	<!-- 코스 리스트 일반 태그 (베스트 코스) -->
	<select id="best_course_list_tag" resultType="String">
		SELECT tag_name
		FROM tag
		WHERE tag_idx IN (SELECT idx FROM tag_course WHERE post_idx =
		#{param1}) AND class='course'
	</select>

	<!-- 코스 리스트 지역 태그 (베스트 코스) -->
	<select id="best_course_list_tag_area" resultType="String">
		SELECT tag_name
		FROM tag_area
		WHERE area_tag_idx in (SELECT idx FROM tag_course WHERE
		post_idx = #{param1} AND class='area_tag')
	</select>

	<!-- 코스 리스트 세부일정 idx (베스트 코스) -->
	<select id="best_detail" resultType="com.eat.dto.DetailRestaDTO">
		SELECT detail_idx
		FROM
		detail_restaurant
		WHERE post_idx = #{param1}
		ORDER BY detail_idx
	</select>

	<!-- 코스 리스트 이미지 불러오기 (베스트 코스) -->
	<select id="best_course_list_img" resultType="String">
		SELECT
		COALESCE(
		(
		SELECT
		p.new_filename
		FROM detail_restaurant dr
		JOIN restaurant r ON
		dr.resta_idx = r.resta_idx
		LEFT JOIN photo p ON r.img_idx = p.img_idx
		AND p.class = 'restaurant'
		WHERE dr.detail_idx = #{param1}
		ORDER BY
		dr.detail_idx, r.resta_idx
		LIMIT 1
		),
		'no_image.jpg'
		) AS new_filename
	</select>


</mapper>